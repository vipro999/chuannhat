// server.js ‚Äî b·∫£n t·ªëi ∆∞u nhanh (reuse browser + cache)
const express = require("express");
const cors = require("cors");
const puppeteer = require("puppeteer");

const app = express();
app.use(cors());
app.use(express.json());

// üß† Gi·ªØ tr√¨nh duy·ªát Puppeteer lu√¥n m·ªü
let browser;
async function getBrowser() {
  if (!browser) {
    console.log("üöÄ Kh·ªüi ƒë·ªông tr√¨nh duy·ªát Puppeteer...");
    browser = await puppeteer.launch({
      headless: true,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });
  }
  return browser;
}

// ‚ö° B·ªô nh·ªõ cache (RAM)
const cache = {}; // { username: { data, time } }
const CACHE_TTL = 5 * 60 * 1000; // 5 ph√∫t

// üì¶ H√†m l·∫•y th√¥ng tin TikTok
async function fetchTikTokProfile(username) {
  const url = `https://www.tiktok.com/@${username}`;
  const browser = await getBrowser();
  const page = await browser.newPage();

  try {
    // Ch·∫∑n t·∫£i h√¨nh ·∫£nh, video, css ƒë·ªÉ tƒÉng t·ªëc
    await page.setRequestInterception(true);
    page.on("request", (req) => {
      const type = req.resourceType();
      if (["image", "media", "font", "stylesheet"].includes(type)) req.abort();
      else req.continue();
    });

    await page.setUserAgent(
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120 Safari/537.36"
    );
    await page.goto(url, { waitUntil: "domcontentloaded", timeout: 15000 });

    // L·∫•y th√¥ng tin t·ª´ meta
    const data = await page.evaluate(() => {
      const get = (sel, attr) =>
        document.querySelector(sel)?.getAttribute(attr) || null;
      const description = get('meta[name="description"]', "content");
      const ogImage = get('meta[property="og:image"]', "content");
      const title = get('meta[property="og:title"]', "content");
      return { description, ogImage, title };
    });

    // Tr√≠ch xu·∫•t s·ªë follower
    let followers = null;
    if (data.description) {
      const match = data.description.match(/([\d.,]+)\s*(?:followers|Follower)/i);
      if (match) followers = match[1];
    }

    await page.close();
    return {
      ok: true,
      username,
      avatar: data.ogImage,
      title: data.title,
      followers,
      description: data.description,
    };
  } catch (err) {
    await page.close();
    return { ok: false, error: err.message };
  }
}

// üîÑ API endpoint
app.get("/api/tiktok", async (req, res) => {
  const user = (req.query.user || "").trim().replace(/^@/, "");
  if (!user) return res.status(400).json({ ok: false, error: "Thi·∫øu username" });

  // ‚ö° D√πng cache n·∫øu c√≤n trong th·ªùi gian TTL
  if (cache[user] && Date.now() - cache[user].time < CACHE_TTL) {
    console.log(`‚ö° Cache hit: ${user}`);
    return res.json(cache[user].data);
  }

  console.log(`üîç Fetching: ${user}`);
  const result = await fetchTikTokProfile(user);
  cache[user] = { time: Date.now(), data: result };
  res.json(result);
});

// üßπ ƒê√≥ng tr√¨nh duy·ªát khi t·∫Øt server
process.on("SIGINT", async () => {
  if (browser) await browser.close();
  process.exit(0);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () =>
  console.log(`‚úÖ Server ch·∫°y t·∫°i http://localhost:${PORT}`)
);
